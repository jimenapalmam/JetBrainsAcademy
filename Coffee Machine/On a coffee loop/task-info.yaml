type: edu
custom_name: stage5
files:
- name: machine/coffee_machine.py
  visible: true
  text: "# Write your code here\nprint(\"The coffee machine has:\")\nprint(\"400 of\
    \ water\")\nprint(\"540 of milk\")\nprint(\"120 of coffee beans\")\nprint(\"9\
    \ of disposable cups\")\nprint(\"550 of money\")\n\ndef coffee_type(user_coffee_type):\n\
    \    global water\n    global milk\n    global beans\n    global cost\n    global\
    \ cups\n    if user_coffee_type == 1:\n        water = -250\n        milk = -0\n\
    \        beans = -16\n        cost = 4\n        cups = -1\n    elif user_coffee_type\
    \ == 2:\n        water = -350\n        milk = -75\n        beans = -20\n     \
    \   cost = 7\n        cups = -1\n    elif user_coffee_type == 3:\n        water\
    \ = -200 \n        milk = -100\n        beans = -12\n        cost = 6\n      \
    \  cups = -1\n    else:\n        ...\n    return water\n    return milk\n    return\
    \ beans\n    return cost\n    return cups\n\ndef fill():\n    global water\n \
    \   global milk\n    global beans\n    global cost\n    global cups\n    water\
    \ = int(input(\"Write how many ml of water do you want to add:\"))\n    milk =\
    \ int(input(\"Write how many ml of milk do you want to add:\"))\n    beans = int(input(\"\
    Write how many grams of coffee beans do you want to add:\"))\n    cups = int(input(\"\
    Write how many disposable cups of coffee do you want to add:\"))\n    cost = 0\n\
    \    return water\n    return milk\n    return beans\n    return cost\n    return\
    \ cups\n\n \naction = input(\"Write action (buy, fill, take):\")\nif action ==\
    \ \"buy\":\n    user_coffee_type = int(input(\"What do you want to buy? 1 - espresso,\
    \ 2 - latte, 3 - cappuccino:\"))\n    coffee_type(user_coffee_type)\nelif action\
    \ == \"fill\":\n    fill()\nelif action == \"take\":\n    water = 0 \n    milk\
    \ = 0\n    beans = 0\n    cost = -550\n    cups = 0\n    print(\"I gave you $550\"\
    )\nelse:\n    ...\nprint(\"The coffee machine has:\")\nprint(400 + water, \"of\
    \ water\")\nprint(540 + milk, \"of milk\")\nprint(120 + beans, \"of coffee beans\"\
    )\nprint(9 + cups, \"of disposable cups\")\nprint(550 + cost, \"of money\")"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/370/implement
status: Solved
record: 4
